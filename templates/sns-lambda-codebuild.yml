Parameters:
  SlackWebhook:
    Type: String
    Default: ''
  CodeRepoUrl:
    Type: String
    Default: ''
  ComputeType:
    Type: String
    Default: BUILD_GENERAL1_SMALL
  ProjectName:
    Type: String
    Default: ''
Resources:
  CodeBuildIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Join ['', [codebuild-, !Ref 'ProjectName', -service-role-policy]]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource:
            - !Join ['', ['arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId',
                ':log-group:/aws/codebuild/', !Ref 'ProjectName']]
            - !Join ['', ['arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId',
                ':log-group:/aws/codebuild/', !Ref 'ProjectName', ':*']]
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          - Effect: Allow
            Resource:
            - !Join ['', ['arn:aws:s3:::codepipeline-', !Ref 'AWS::Region', -*]]
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
          - Effect: Allow
            Action:
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:GetRepositoryPolicy
            - ecr:DescribeRepositories
            - ecr:ListImages
            - ecr:DescribeImages
            - ecr:BatchGetImage
            - ecr:InitiateLayerUpload
            - ecr:UploadLayerPart
            - ecr:CompleteLayerUpload
            - ecr:PutImage
            Resource: '*'
      Path: /service-role/
      RoleName: !Join ['', [codebuild-, !Ref 'ProjectName', -service-role]]
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Join ['', [lambda-, !Ref 'ProjectName', -github-role-policy]]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Action:
            - codebuild:StartBuild
            - codebuild:StopBuild
            - codebuild:BatchGet*
            - codebuild:Get*
            - codebuild:List*
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:GetLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*
      Path: /
      RoleName: !Join ['', [lambda-, !Ref 'ProjectName', -github-role]]
  LambdaGitSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Join ['', [lambda-, !Ref 'ProjectName', -git]]
      Subscription:
      - Endpoint: !GetAtt [GithubLambdaFunction, Arn]
        Protocol: lambda
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref 'ProjectName'
      Source:
        Type: GITHUB
        Location: !Ref 'CodeRepoUrl'
        Auth:
          Type: OAUTH
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/docker:1.12.1
        ComputeType: !Ref 'ComputeType'
        EnvironmentVariables:
        - Name: SLACK_WEBHOOK
          Value: !Ref 'SlackWebhook'
      ServiceRole: !GetAtt [CodeBuildIAMRole, Arn]
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'LambdaGitSNS'
      FunctionName: !GetAtt [GithubLambdaFunction, Arn]
  GithubLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Join ['

            ', [from __future__ import print_function, import boto3, import json,
            print('Loading function'), client = boto3.client('codebuild'), 'def lambda_handler(event,
              context):', '    message = event[''Records''][0][''Sns''][''Message'']',
            '    print(''From SNS: '' + message)', '    parsed = json.loads(message)',
            '    pieces = parsed[''ref''].split(''/'')', '    pieces.pop(0)', '    pieces.pop(0)',
            '    branch = ''/''.join(pieces)', '    commit = parsed[''after'']', '    short
              = commit[0:7]', '    repo = parsed[''repository''][''name'']', '    print(''Branch:
              '' + branch)', '    print(''Commit: '' + commit)', '    print(''Short:
              '' + short)', '    print(''Repo: '' + repo)', '    if commit == ''0000000000000000000000000000000000000000'':',
            '        print(''Nothing to Build'')', '        return True', !Join [
              '', ['    response = client.start_build(projectName=''', !Ref 'ProjectName',
                ''', sourceVersion=branch)']], '    print(''Build Triggered'')', '    return
              True']]
      Description: !Join [' ', [Process Github notifications for, !Ref 'CodeRepoUrl']]
      FunctionName: !Join ['-', [github-hook, !Ref 'ProjectName']]
      Handler: index.lambda_handler
      Role: !GetAtt [LambdaIAMRole, Arn]
      Runtime: python2.7
      Timeout: 60
  SNSHookUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Join ['', [github-, !Ref 'ProjectName', -sns-user]]
      Policies:
      - PolicyName: !Join ['', [github-, !Ref 'ProjectName', -sns-policy]]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - sns:Publish
            Resource:
            - !Join ['', ['arn:aws:sns:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId',
                ':', !GetAtt [LambdaGitSNS, TopicName]]]
            Effect: Allow
  SNSHookUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Join ['', [github-, !Ref 'ProjectName', -sns-user]]
    DependsOn:
    - SNSHookUser
Outputs:
  AccessKey:
    Description: The User AccessKey
    Value: !Ref 'SNSHookUserKey'
  SecretKey:
    Description: The User SecretAccessKey
    Value: !GetAtt [SNSHookUserKey, SecretAccessKey]
